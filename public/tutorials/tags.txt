<?php

namespace App\Http\Controllers\backend\post;

use App\Models\Admin\Tag;
use App\Models\Admin\Post;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\Admin\Category;
use App\Http\Controllers\Controller;
use Illuminate\Validation\Rules\Unique;

class CreatePost extends Controller
{
    public function create()
    {
        $data['catOption'] = Category::where('parent_id', null)->orderBy('id', 'desc')->get();

      //  $data['checkEmpty'] = Str::length($this->slug);
        //$data['checkSlug'] = Post::where('slug', '=', Str::slug($this->slug))->exists();

        return view('backend.post.create-post', compact('data'));
    }
    public function createTag()
    {
        return view('backend.post.tag');
    }


    public function storeTag(Request $request){

        // if($request->has('tags')){
        //     $tags = explode(",", $request->tags);
        //     $tags_id = [];

        //     foreach($tags as $tag){
        //         $tag_model = Tag::where('title', $tag)->first();
        //         if($tag_model){
        //             array_push($tags_id, $tag_model->id);
        //         }
        //         else{
        //             array_push($tags_id, (Tag::create(['title'=>$tag]))->id);
        //         }
        //     }
        //     $post->tags()->sync($tags_id);
        // }

    //dd($request->tags);

    }









    // public function generateSlug()
    // {
    //     $slug = Str::slug($this->title);
    //     $count = Post::where('slug', 'LIKE', "{$slug}%")->count();
    //     $newCount = $count > 0 ? ++$count : '';
    //     $myslug = $newCount > 0 ? "$slug-$newCount" : $slug;
    //     return $this->slug = $myslug;
    // }

    public function storePost(Request $request)
        {
            date_default_timezone_set("Asia/Dhaka");
            //dd($request->all());

            $validatedDate = $request->validate([
               'title' => ['required', 'string', 'max:255'],
               'slug' => ['required', 'string', 'min:2', 'max:255', 'Unique:posts'],
                'short_description' => ['required', 'string', 'min:2', 'max:500'],
                'description' => ['required'],
                'meta_description' => ['required', 'string', 'min:2', 'max:500'],
                'publish_status' => ['required','boolean'],
                'is_sticky' => ['boolean'],
                'allow_comments' => ['boolean'],
                'featured_image' => 'nullable|image|mimes:jpg,jpeg,png,svg,gif|max:2048',
                'category_id' => ['required', 'numeric'],
                'tags' => ['required'],
            ]);
            //dd($request->all());
            //$request->user_id = auth()->id();
           // Post::create($request->all());
            //Tag::create($request->only('tags'));

            // $post = Post::create($request->all());
            // if($post)
            //    {
            //        $tagNames = explode(',',$request->get('tags'));
            //         $tagIds = [];
            //         foreach($tagNames as $tagName)
            //         {
            //             //$post->tags()->create(['name'=>$tagName]);
            //             //Or to take care of avoiding duplication of Tag
            //             //you could substitute the above line as
            //             $tag = Tag::firstOrCreate(['title'=>$tagName]);
            //             if($tag)
            //             {
            //             $tagIds[] = $tag->id;
            //             }

            //         }
            //         $post->tags()->sync($tagIds);
            //     }





            $post = new Post;
            $post->title = $request->title;
            $post->slug = $request->slug;
            $post->short_description = $request->short_description;
            $post->description = $request->description;
            $post->meta_description = $request->meta_description;
            $post->category_id = $request->category_id;
            $post->publish_status = $request->publish_status;
            $post->is_sticky = $request->is_sticky ? $request->is_sticky : 0;
            $post->allow_comments = $request->allow_comments ? $request->allow_comments : 0;
            $post->featured_image = $request->featured_image ? $request->featured_image : NULL;
            $post->published_at = date("Y-m-d H:i:s");
            $post->user_id = auth()->id();
            $post->save();

            // if($request->has('tags')){
            //     $tags = explode(",", $request->tags);
            //     $tags_id = [];

            //     foreach($tags as $tag){
            //         $tag_model = Tag::where('title', $tag)->first();
            //         if($tag_model){
            //             array_push($tags_id, $tag_model->id);
            //         }
            //         else{
            //             array_push($tags_id, (Tag::create(['title'=>$tag]))->id);
            //         }
            //     }
            //     $post->tags()->sync($tags_id);
            // }

            if($request->has('tags')){
                $tags = explode(",", $request->tags);
                $tags_id = [];

                foreach($tags as $tag){
                    $tag_model = Tag::firstOrCreate(['title'=>$tag, 'slug'=>Str::slug($tag)]);
                    if($tag_model){
                        array_push($tags_id, $tag_model->id);
                    }
                }
                $post->tags()->sync($tags_id);
            }





        //     $tagNames = explode(',', $request->tags);
        //     $tagNames2 = [];
        //    // if ($user->states != FALSE) {
        //     if (!empty($tagNames)) {
        //     foreach ($tagNames as $tagName)
        //     {
        //         dd($tagName);
        //     //$tag = Tag::firstOrCreate(['title'=>$tagName, 'slug'=>Str::slug($tagName)]);
        //     // if($tag)
        //     // {
        //     // $tagNames[] = $tag->id;
        //     // }
        //     }
        //     $post->tags()->syncWithoutDetaching($tagNames);
        //     }
        //     else{
        //         dd('Display Blank');
        //     }

            return redirect(route('admin.all-post'))->with('message', 'Post Created Successfully');

            // $slug = Str::slug($this->slug);
            // $count = Category::where('slug', 'LIKE', "{$slug}%")->count();
            // $newCount = $count > 0 ? ++$count : '';
            // $myslug = $newCount > 0 ? "$slug-$newCount" : $slug;

            // if (!empty($this->featured_image)) {
            //     $newImageName = $myslug.".".$this->featured_image->extension();
            //     $this->featured_image->storeAs('post-images', $newImageName, 'public');
            //     //$imageurl = url('storage') . '/' . $image;
            // } else {
            //     $newImageName = "default-feature-image.png";
            // }
            //     Post::create([
            //         'title' => $this->title,
            //         'slug' => $myslug,
            //         'short_description' => $this->short_description,
            //         'description' => $this->description,
            //         'meta_description' => $this->meta_description,
            //         'featured_image' => $newImageName,
            //         'user_id' => auth()->id(),
            //         'category_id' => $this->category_id,
            //         'published_at' => date("Y-m-d H:i:s"),
            //         //'category_id' => $this->parent_id ? $this->parent_id : NULL,
            //     ], $validatedDate);
                //dd(date("Y-m-d H:i:s"));
                //return redirect(route('admin.all-post'))->with('message', 'Post Created Successfully');
               // session()->flash('message', 'Category Created Successfully.');
                //$this->resetInputFields();
               // $this->emit('storeCategory');




        //    $post = Post::create([
        //         'title' => $request->get('title'),
        //         'body'  => $request->get('body')
        //    ]);

        //    if($post)
        //    {
        //        $tagNames = explode(',',$request->get('tags'));
        //         $tagIds = [];
        //         foreach($tagNames as $tagName)
        //         {
        //             //$post->tags()->create(['name'=>$tagName]);
        //             //Or to take care of avoiding duplication of Tag
        //             //you could substitute the above line as
        //             $tag = App\Tag::firstOrCreate(['name'=>$tagName]);
        //             if($tag)
        //             {
        //             $tagIds[] = $tag->id;
        //             }

        //         }
        //         $post->tags()->sync($tagIds);
        //     }
        }
}
